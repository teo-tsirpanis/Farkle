//This parser has been written with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 15)
%{
open Chiron
%}

%start value

%token <int> INT
%token <Chiron.Json> FLOAT
%token <string> ID
%token <string> STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token EOF
%type <Chiron.Json> value

%%

value:
  | LEFT_BRACE object_fields RIGHT_BRACE { Object <| Map.ofList $2 }
  | LEFT_BRACK array_values RIGHT_BRACK { Array $2 }
  | STRING { String $1 }
  | FLOAT { $1 }
  | TRUE { Bool true }
  | FALSE { Bool false }
  | NULL { Null () }

object_fields: rev_object_fields { List.rev $1 };

rev_object_fields:
  | { [] }
  | STRING COLON value { [($1,$3)] }
  | rev_object_fields COMMA STRING COLON value { ($3, $5) :: $1 }

array_values:
  | { [] }
  | rev_values { List.rev $1 }

rev_values:
  | value { [$1] }
  | rev_values COMMA value { $3 :: $1 }
