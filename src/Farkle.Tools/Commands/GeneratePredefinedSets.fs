// Copyright (c) 2019 Theodore Tsirpanis
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

module Farkle.Tools.Commands.GeneratePredefinedSets

open Argu
open Farkle.Grammar.EGTFile
open Farkle.Monads.Either
open Farkle.Tools
open Scriban
open Scriban.Runtime
open Serilog
open System
open System.IO
open System.Text

type Arguments =
    | [<ExactlyOnce; MainCommand>] PredefinedSetsFile of string
    | [<Unique; AltCommandLine("-o")>] OutputFile of string
with
    interface IArgParserTemplate with
        member x.Usage =
            match x with
            | PredefinedSetsFile _ -> "The file 'sets.dat' which is bundled with the GOLD Parser Builder"
            | OutputFile _ -> "The path to write the generated F# source file with the predefined sets. \
Defaults to 'PredefinedSets.fs'."

type CharacterRange = {
    CFrom: char
    CTo: char
}

type PredefinedSet = {
    Name: string
    Comment: string
    Characters: CharacterRange []
}

module private Implementation =

    let getCategoryFullName =
        function
        | "C" -> "Constants"
        | "M" -> "Miscellaneous"
        | "A" -> "ASCII Useful"
        | "U" -> "Unicode Useful"
        | "B" -> "Unicode Blocks"
        | x -> x

    let headerCheck x =
        if x <> "GOLD Character Sets" then
            EGTFileException "Invalid GOLD Parser sets file"
            |> raise

    let createPredefinedSet (span: ReadOnlySpan<_>) =
        lengthMustBeAtLeast span 4
        let name = wantString span 0
        let comment = wantString span 2
        Log.Debug("Read character set with name {Name}, category {Category} and comment {Comment}", name, comment)
        let count = wantUInt32 span 3 |> int
        lengthMustBe span (4 + 2 * count)
        let mem = span.Slice(4)
        let characters = Array.zeroCreate count
        for i = 0 to count - 1 do
            let c1 = wantUInt32 mem (2 * i + 0) |> char
            let c2 = wantUInt32 mem (2 * i + 1) |> char
            Array.set characters i {CFrom = c1; CTo = c2}
        {Name = name; Comment = comment; Characters = characters}

    let readPredefinedSets filePath =
        use stream = File.OpenRead(filePath)
        use er = new EGTReader(stream)
        let list = ResizeArray()
        headerCheck er.Header
        while er.IsEndOfFile do
            er.NextRecord()
            createPredefinedSet er.Span |> list.Add
        Log.Debug("Reading {FilePath} succeeded.", filePath)
        list.ToArray()

    module private Utilities =

        let hexChar (c: char) = sprintf "%04x" (int c)

        let capitalizeFirst (x: string) =
            if String.IsNullOrEmpty(x) || Char.IsUpper(x, 0) then
                x
            else
                let sb = StringBuilder()
                sb.Append(Char.ToUpperInvariant(x.[0])).Append(x, 1, x.Length - 1) |> ignore
                sb.ToString()

        let makeFSharpIndent (x: string) =
            x.Split([|' '; '-'|])
            |> Seq.map capitalizeFirst
            |> String.concat ""

    let loadUtilities(so: ScriptObject) =
        so.Import("make_fsharp_indent", Func<_,_> Utilities.makeFSharpIndent)
        so.Import("hex_char", Func<_,_> Utilities.hexChar)

    let template = """// This file was generated by Farkle.Tools, from data from the GOLD Parser Builder.
// To generate it yourself, grab the 'sets.dat' file from the GOLD Parser Builder
// and run 'farkle generate-predefined-sets' to learn more.

[<AutoOpen>]
/// Some common character sets that were imported from GOLD Parser.
module Farkle.Builder.PredefinedSets

{{~ for s in predefined_sets ~}}
    {{~ if s.comment != "" ~}}
    /// {{ s.comment }}
    {{~ end ~}}
    {{~ if s.characters.size == 1 ~}}
    {{~ c = s.characters[0] ~}}
    let {{ make_fsharp_indent s.name }} = PredefinedSet.Create "{{s.name}}" ['\u{{ hex_char c.cfrom }}', '\u{{ hex_char c.cto }}']
    {{~ else ~}}
    let {{ make_fsharp_indent s.name }} = PredefinedSet.Create "{{s.name}}" [
    {{~ for c in s.characters ~}}
        '\u{{ hex_char c.cfrom }}', '\u{{ hex_char c.cto }}'
    {{~ end ~}}
    ]
    {{~ end ~}}
{{ end }}"""

open Implementation

let generatePredefinedSets filePath = either {
    let theSets = readPredefinedSets filePath
    let! template = parseScribanTemplate Log.Logger template "Predefined Sets F# Template"
    let so = ScriptObject()
    so.SetValue("predefined_sets", theSets, true)
    loadUtilities so

    let tc = TemplateContext()
    tc.StrictVariables <- true
    tc.PushGlobal so

    return template.Render(tc)
}

let run (args: ParseResults<_>) = either {
    let! inputFile = args.PostProcessResult(PredefinedSetsFile, assertFileExists)
    let outputFile = args.GetResult(OutputFile, "PredefinedSets.fs") |> Path.GetFullPath

    let! generatedSource = generatePredefinedSets inputFile

    File.WriteAllText(outputFile, generatedSource)
    Log.Information("Predefined sets generated at {OutputFile}", outputFile)
}
