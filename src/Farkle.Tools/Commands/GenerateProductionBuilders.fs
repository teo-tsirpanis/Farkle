// Copyright (c) 2019 Theodore Tsirpanis
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

module Farkle.Tools.Commands.GenerateProductionBuilders

open Argu
open Farkle.Monads.Either
open Farkle.Tools
open Scriban
open Scriban.Runtime
open Serilog
open System.IO

type Arguments =
    | [<Unique; AltCommandLine("-c")>] Capacity of int
    | [<Unique; AltCommandLine("-o")>] OutputFile of string
with
    interface IArgParserTemplate with
        member x.Usage =
            match x with
            | Capacity _ -> "The maximum amount of significant \
symbols supported by the production builders. Defaults to 16."
            | OutputFile _ -> "The path to write the generated F# \
source file with the production builders."

module private Implementation =

    let template = """// This file was generated by Farkle.Tools, from a Scriban template.
// To generate it yourself, run 'farkle generate-production-builders' to learn more.
{{~ func gen_type_params_impl
        x = ""
        for i in 1..$0
            x = x + $1 + i
            if !for.last
                x = x + $2
            end
        end
        ret x
    end
    func type_params
        ret gen_type_params_impl $0 "'T" ", "
    end
    func finish_signature
        ret (gen_type_params_impl $0 "'T" " -> ") + "-> 'TOutput"
    end ~}}
{{~ func gen_builder
        n = $0 ~}}
type ProductionBuilder<{{ type_params n }}> = {
    Members: Symbol ImmutableList
    {{~ for i in 1..n ~}}
    Index{{ i }}: int
    {{~ end ~}}
}
with
    member x.Append(sym) = {x with Members = Symbol.append x.Members sym}
    {{~ if ~for.first ~}}
    member x.Extend(df: DesigntimeFarkle<'T{{ n }}>) = {
        Members = Symbol.append x.Members df
        {{~ for i in 1..n ~}}
        Index{{ i }} = x.Index{{ i }}
        {{~ end ~}}
        Index{{ i + 1 }} = x.Members.Count
    }
    {{~ else ~}}
    [<Obsolete("Cannot support more than {{ capacity }} significant symbols. \
Replace calls to Extend with Append, and use FinishRaw.")>]
    member x.Extend _ : unit =
        failwith "Cannot support more than {{ capacity }} significant symbols. \
Replace calls to Extend with Append, and use FinishRaw."
    {{~ end ~}}
    member x.Finish(f: {{ finish_signature n }}) : Production<'TOutput> = {
        Members = x.Members.ToImmutableArray()
        Fuse =
            fun arr ->
                f
                    {{~ for i in 1..n ~}}
                    (downcast arr.[x.Index{{ i }}])
                    {{~ end ~}}
                |> box
    }

{{~ end ~}}

namespace Farkle.Builder

open System.Collections.Immutable

{{~ for i in 1..capacity reversed
        gen_builder i
    end ~}}

"""

let generateProductionBuilders capacity = either {
    if capacity <= 0 then
        Log.Error("Capacity cannot be negative.")
        return! Error()
    let! template = parseScribanTemplate Log.Logger Implementation.template "Production Builders F# Template"
    let so = ScriptObject()
    so.SetValue("capacity", capacity, true)

    let tc = TemplateContext()
    tc.StrictVariables <- true
    tc.PushGlobal so

    return template.Render(tc)
}

let run (args: ParseResults<_>) = either {
    let capacity = args.GetResult(Capacity, 16)
    let outputFile = args.GetResult(OutputFile, "ProductionBuilders.fs") |> Path.GetFullPath

    let! generatedSource = generateProductionBuilders capacity

    File.WriteAllText(outputFile, generatedSource)
    Log.Information("Production builders generated at {OutputFile}", outputFile)
}
