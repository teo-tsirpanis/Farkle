{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ file_extension = "cs"; grammar_name = grammar.properties["Name"] ~}}
// This file was created by Farkle.Tools and is a skeleton
// to help you write a post-processor for {{ grammar_name }}.
// You should complete it yourself, and keep it to source control.

using System;
using Farkle.CSharp;
using Farkle.PostProcessor;
using {{ grammar_name }}.Definitions;

namespace {{ grammar_name }}.Runtime {
    public static class {{ grammar_name }} {
        // The transformers convert terminals to anything you want.
        // If you do not care about a terminal (like single characters),
        // you can remove it from below. It will be automatically ignored.
        private static Transformer[] transformers = new [] {
        {{~ for s in grammar.symbols.terminals ~}}
            Transformer.Create(Terminal.{{ s | fmt pascal_case "" }}, data => data),
        {{~ end ~}}
        };

        // The fusers merge the parts of a production into one object of your desire.
        // Do not delete anything here, or the post-processor will fail.
        private static Fuser[] fusers = new [] {
        {{~ for p in grammar.productions ~}}
            Fuser.FUSER_FUNCTION_HERE(Production.{{ p | fmt pascal_case "" }}),
        {{~ end ~}}
        };

        public static readonly Lazy<RuntimeFarkle<TODO>> {{ grammar_name }} =
            new Lazy(() => RuntimeFarkle.CreateFromBase64String(Grammar.AsBase64, PostProcessor.Create<TODO>(transformers, fusers)));
    }
}
