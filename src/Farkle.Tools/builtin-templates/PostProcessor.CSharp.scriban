{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ file_extension = ".cs"; grammar_name = grammar.properties["Name"] ~}}
// This file was created by Farkle.Tools and is a skeleton
// to help you write a post-processor for {{ grammar_name }}.
// You should complete it yourself, and keep it to source control.

using System;
using Farkle;
using Farkle.CSharp;
using {{ namespace }}.Definitions;

namespace {{ namespace }} {
    public static class Language {

        // This function converts terminals to anything you want.
        // If you do not care about a terminal (like single characters),
        // you can let the default case return null.
        private static object Transform(uint terminal, Position position, ReadOnlySpan<char> data) {
            switch ((Terminal) terminal) {
            {{~ for s in grammar.symbols.terminals ~}}
                case Terminal.{{ s | fmt pascal_case "" }} :
                    return data;
            {{~ end ~}}
                default: return null;
            }
        }

        // The fusers merge the parts of a production into one object of your desire.
        // This function maps each production to a fuser.
        // Do not delete anything here, or the post-processor will fail.
        private static Fuser GetFuser(uint prod) {
            switch ((Production) prod) {
            {{~ for p in grammar.productions ~}}
                case Production.{{ p | fmt pascal_case "" }}:
                    return Fuser.
            {{~ end ~}}
                default: return null; // This line should never be reached.
            }
        }

        public static readonly RuntimeFarkle<TODO> Runtime =
            RuntimeFarkle<TODO>.CreateFromBase64String(Grammar.AsBase64,PostProcessor.Create<TODO>(Transform, GetFuser));
    }
}
