{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ file_extension = ".fs"; grammar_name = grammar.properties["Name"] ~}}
// This file was created by Farkle.Tools and is a skeleton
// to help you write a post-processor for {{ grammar_name }}.
// You should complete it yourself, and keep it to source control.

module {{ grammar_name }}.Language

open Farkle
open Farkle.PostProcessor
open {{ grammar_name }}.Definitions

// The transformers convert terminals to anything you want.
// If you do not care about a terminal (like single characters),
// you can remove it from below. It will be automatically ignored.
let private transformers =
    [
    {{~ for s in grammar.symbols.terminals ~}}
        Transformer.create Terminal.{{ s | fmt pascal_case "" }} <| C (fun x -> x)
    {{~ end ~}}
    ]

open Fuser

// The fusers merge the parts of a production into one object of your desire.
// Do not delete anything here, or the post-processor will fail.
let private fusers =
    [
    {{~ for p in grammar.productions ~}}
        FUSER_FUNCTION_HERE Production.{{ p | fmt pascal_case "" }}
    {{~ end ~}}
    ]

let private createRuntimeFarkle() =
    RuntimeFarkle.ofBase64String
        (PostProcessor.ofSeq<TODO> transformers fusers)
        Grammar.asBase64

let runtime = createRuntimeFarkle()
