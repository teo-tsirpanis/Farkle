// <auto-generated/>
// This file was automatically generated by Farkle's build system from a Scriban template.
// It should not be manually edited; to regenerate it run 'build.ps1 target GenerateCode'.
#nowarn "1204"

namespace Farkle.Builder.ProductionBuilders

open Farkle.Builder
open Farkle.Common
open LanguagePrimitives.IntrinsicFunctions
open System
open System.ComponentModel
open System.Collections.Immutable
open System.Runtime.CompilerServices

[<AutoOpen>]
module private ProductionBuilderHelpers =
    let inline listAdd (list: ImmutableList<_>) (df: DesigntimeFarkle) = list.Add df

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 16 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, idx16, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, idx16, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>, literal: string) =
        x.Append(literal)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let idx12 = idx12
        let idx13 = idx13
        let idx14 = idx14
        let idx15 = idx15
        let idx16 = idx16
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
                idx12, typeof<'T12>
                idx13, typeof<'T13>
                idx14, typeof<'T14>
                idx15, typeof<'T15>
                idx16, typeof<'T16>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11]),
                    (UnboxFast arr.[idx12]),
                    (UnboxFast arr.[idx13]),
                    (UnboxFast arr.[idx14]),
                    (UnboxFast arr.[idx15]),
                    (UnboxFast arr.[idx16])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, idx16, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11 -> 'T12 -> 'T13 -> 'T14 -> 'T15 -> 'T16-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 15 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T16>(df: DesigntimeFarkle<'T16>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let idx12 = idx12
        let idx13 = idx13
        let idx14 = idx14
        let idx15 = idx15
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
                idx12, typeof<'T12>
                idx13, typeof<'T13>
                idx14, typeof<'T14>
                idx15, typeof<'T15>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11]),
                    (UnboxFast arr.[idx12]),
                    (UnboxFast arr.[idx13]),
                    (UnboxFast arr.[idx14]),
                    (UnboxFast arr.[idx15])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, idx15, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11 -> 'T12 -> 'T13 -> 'T14 -> 'T15-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 14 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T15>(df: DesigntimeFarkle<'T15>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let idx12 = idx12
        let idx13 = idx13
        let idx14 = idx14
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
                idx12, typeof<'T12>
                idx13, typeof<'T13>
                idx14, typeof<'T14>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11]),
                    (UnboxFast arr.[idx12]),
                    (UnboxFast arr.[idx13]),
                    (UnboxFast arr.[idx14])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, idx14, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11 -> 'T12 -> 'T13 -> 'T14-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 13 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T14>(df: DesigntimeFarkle<'T14>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let idx12 = idx12
        let idx13 = idx13
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
                idx12, typeof<'T12>
                idx13, typeof<'T13>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11]),
                    (UnboxFast arr.[idx12]),
                    (UnboxFast arr.[idx13])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, idx13, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11 -> 'T12 -> 'T13-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 12 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T13>(df: DesigntimeFarkle<'T13>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let idx12 = idx12
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
                idx12, typeof<'T12>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11]),
                    (UnboxFast arr.[idx12])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, idx12, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11 -> 'T12-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 11 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T12>(df: DesigntimeFarkle<'T12>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let idx11 = idx11
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
                idx11, typeof<'T11>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10]),
                    (UnboxFast arr.[idx11])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10 -> 'T11-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 10 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T11>(df: DesigntimeFarkle<'T11>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let idx10 = idx10
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
                idx10, typeof<'T10>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9]),
                    (UnboxFast arr.[idx10])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9 -> 'T10-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 9 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T10>(df: DesigntimeFarkle<'T10>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let idx9 = idx9
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
                idx9, typeof<'T9>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8]),
                    (UnboxFast arr.[idx9])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8 -> 'T9-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
            f x1 x2 x3 x4 x5 x6 x7 x8 x9)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 8 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T9>(df: DesigntimeFarkle<'T9>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let idx8 = idx8
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
                idx8, typeof<'T8>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7]),
                    (UnboxFast arr.[idx8])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7 -> 'T8-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 x8 ->
            f x1 x2 x3 x4 x5 x6 x7 x8)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 7 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T8>(df: DesigntimeFarkle<'T8>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, idx7, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let idx7 = idx7
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
                idx7, typeof<'T7>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6]),
                    (UnboxFast arr.[idx7])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>(members, idx1, idx2, idx3, idx4, idx5, idx6, idx7, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6 -> 'T7-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 x7 ->
            f x1 x2 x3 x4 x5 x6 x7)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 6 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6> internal(members, idx1, idx2, idx3, idx4, idx5, idx6, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T7>(df: DesigntimeFarkle<'T7>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>(listAdd members df, idx1, idx2, idx3, idx4, idx5, idx6, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let idx6 = idx6
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
                idx6, typeof<'T6>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5]),
                    (UnboxFast arr.[idx6])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>(members, idx1, idx2, idx3, idx4, idx5, idx6, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5 -> 'T6-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(fun x1 x2 x3 x4 x5 x6 ->
            f x1 x2 x3 x4 x5 x6)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 5 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5> internal(members, idx1, idx2, idx3, idx4, idx5, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>(listAdd members df, idx1, idx2, idx3, idx4, idx5, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T6>(df: DesigntimeFarkle<'T6>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>(listAdd members df, idx1, idx2, idx3, idx4, idx5, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'T5, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let idx5 = idx5
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
                idx5, typeof<'T5>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4]),
                    (UnboxFast arr.[idx5])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>(members, idx1, idx2, idx3, idx4, idx5, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4 -> 'T5-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        let fOptimized =
            OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3, 'T4, 'T5, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 4 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3, 'T4> internal(members, idx1, idx2, idx3, idx4, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4>(listAdd members df, idx1, idx2, idx3, idx4, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T5>(df: DesigntimeFarkle<'T5>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4, 'T5>(listAdd members df, idx1, idx2, idx3, idx4, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'T4, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let idx4 = idx4
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
                idx4, typeof<'T4>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3]),
                    (UnboxFast arr.[idx4])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3, 'T4>(members, idx1, idx2, idx3, idx4, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3 -> 'T4-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        let fOptimized =
            OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3, 'T4, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3, 'T4>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 3 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2, 'T3> internal(members, idx1, idx2, idx3, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2, 'T3>(listAdd members df, idx1, idx2, idx3, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2, 'T3>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T4>(df: DesigntimeFarkle<'T4>) =
        ProductionBuilder<'T1, 'T2, 'T3, 'T4>(listAdd members df, idx1, idx2, idx3, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2, 'T3>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'T3, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let idx3 = idx3
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
                idx3, typeof<'T3>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2]),
                    (UnboxFast arr.[idx3])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2, 'T3>(members, idx1, idx2, idx3, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2 -> 'T3-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        let fOptimized =
            OptimizedClosures.FSharpFunc<'T1, 'T2, 'T3, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2, 'T3>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 2 significant members.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1, 'T2> internal(members, idx1, idx2, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1, 'T2>(listAdd members df, idx1, idx2, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1, 'T2>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T3>(df: DesigntimeFarkle<'T3>) =
        ProductionBuilder<'T1, 'T2, 'T3>(listAdd members df, idx1, idx2, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1, 'T2>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'T2, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let idx2 = idx2
        let parameters =
            [
                idx1, typeof<'T1>
                idx2, typeof<'T2>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1]),
                    (UnboxFast arr.[idx2])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1, 'T2>(members, idx1, idx2, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1 -> 'T2-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        let fOptimized =
            OptimizedClosures.FSharpFunc<'T1, 'T2, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1, 'T2>, f) =
        x.FinishFSharp(f)

[<Sealed; NullableContext(2uy)>]
/// <summary>A production builder with 1 significant member.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
type ProductionBuilder<'T1> internal(members, idx1, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df) : [<Nullable(1uy)>] _ =
        ProductionBuilder<'T1>(listAdd members df, idx1, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<'T1>, literal: string) =
        x.Append(literal)
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] 'T2>(df: DesigntimeFarkle<'T2>) =
        ProductionBuilder<'T1, 'T2>(listAdd members df, idx1, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<'T1>, df) =
        x.Extend(df)
    /// Finishes the production's construction and returns it.
    /// This method accepts a delegate that accepts the production's
    /// significant members and returns the production's output.
    [<NullableContext(1uy)>]
    member _.Finish([<Nullable(1uy)>] f: Func<'T1, 'TOutput>) : [<Nullable(1uy)>] _ =
        let idx1 = idx1
        let parameters =
            [
                idx1, typeof<'T1>
            ]
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    (UnboxFast arr.[idx1])
                )
            )
        let fuserData = FuserData.Create(f, fBoxed, parameters)
        Production<'TOutput>(members, fuserData, cpToken)
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck "cpToken" cpToken
        ProductionBuilder<'T1>(members, idx1, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production's contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)

    /// Returns a production that returns its significant member without changing it.
    member _.AsIs() : [<Nullable(1uy)>] _ =
        Production<'T1>(members, FuserData.CreateAsIs idx1, cpToken)
    /// Finishes the production's construction and returns it.
    /// This method accepts an F# function that accepts the production's
    /// significant members and returns the production's output.
    member x.FinishFSharp([<Nullable(1uy)>] f: 'T1-> 'TOutput): [<Nullable(1uy)>] Production<'TOutput> =
        x.Finish(Delegate.ofInvokeMethod f)
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<'T1>, f) =
        x.FinishFSharp(f)

