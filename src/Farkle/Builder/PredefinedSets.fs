// This file was generated by Farkle.Tools, from data from the GOLD Parser Builder.
// To generate it yourself, grab the 'sets.dat' file from the GOLD Parser Builder
// and run 'farkle gnerate-predefined-sets' lo learn more.

[<AutoOpen>]
/// Some common character sets that were imported from GOLD Parser.
module Farkle.Builder.PredefinedSets

    /// Horizontal Tab
    let HT = PredefinedSet.Create "HT" ['\u0009', '\u0009']
    /// Line Feed
    let LF = PredefinedSet.Create "LF" ['\u000a', '\u000a']
    /// Vertical Tab
    let VT = PredefinedSet.Create "VT" ['\u000b', '\u000b']
    /// Form Feed (new page)
    let FF = PredefinedSet.Create "FF" ['\u000c', '\u000c']
    /// Carriage Return
    let CR = PredefinedSet.Create "CR" ['\u000d', '\u000d']
    /// Common space character
    let Space = PredefinedSet.Create "Space" ['\u0020', '\u0020']
    /// No-break Space
    let NBSP = PredefinedSet.Create "NBSP" ['\u00a0', '\u00a0']
    /// Currency sign for the European Monetary Union
    let EuroSign = PredefinedSet.Create "Euro Sign" ['\u20ac', '\u20ac']
    let Whitespace = PredefinedSet.Create "Whitespace" [
        '\u0009', '\u000d'
        '\u0020', '\u0020'
        '\u00a0', '\u00a0'
    ]
    let Letter = PredefinedSet.Create "Letter" [
        '\u0041', '\u005a'
        '\u0061', '\u007a'
    ]
    let LetterExtended = PredefinedSet.Create "Letter Extended" [
        '\u00c0', '\u00d6'
        '\u00d8', '\u00f6'
        '\u00f8', '\u00ff'
    ]
    let AllLatin = PredefinedSet.Create "All Latin" [
        '\u0041', '\u005a'
        '\u0061', '\u007a'
        '\u00aa', '\u00aa'
        '\u00b5', '\u00b5'
        '\u00ba', '\u00ba'
        '\u00c0', '\u00d6'
        '\u00d8', '\u00f6'
        '\u00f8', '\u024f'
        '\u1e00', '\u1eff'
        '\u2c60', '\u2c7f'
        '\ua720', '\ua7ff'
    ]
    let Number = PredefinedSet.Create "Number" ['\u0030', '\u0039']
    let AlphaNumeric = PredefinedSet.Create "AlphaNumeric" [
        '\u0030', '\u0039'
        '\u0041', '\u005a'
        '\u0061', '\u007a'
    ]
    let Printable = PredefinedSet.Create "Printable" [
        '\u0020', '\u007e'
        '\u00a0', '\u00a0'
    ]
    let PrintableExtended = PredefinedSet.Create "Printable Extended" ['\u00a1', '\u00ff']
    let BasicLatin = PredefinedSet.Create "Basic Latin" ['\u0000', '\u007f']
    let Latin1Supplement = PredefinedSet.Create "Latin-1 Supplement" ['\u0080', '\u00ff']
    let LatinExtendedA = PredefinedSet.Create "Latin Extended-A" ['\u0100', '\u017f']
    let LatinExtendedB = PredefinedSet.Create "Latin Extended-B" ['\u0180', '\u024f']
    let IPAExtensions = PredefinedSet.Create "IPA Extensions" ['\u0250', '\u02af']
    let SpacingModifierLetters = PredefinedSet.Create "Spacing Modifier Letters" ['\u02b0', '\u02ff']
    let CombiningDiacriticalMarks = PredefinedSet.Create "Combining Diacritical Marks" ['\u0300', '\u036f']
    let GreekAndCoptic = PredefinedSet.Create "Greek and Coptic" ['\u0370', '\u03ff']
    let Cyrillic = PredefinedSet.Create "Cyrillic" ['\u0400', '\u04ff']
    let CyrillicSupplement = PredefinedSet.Create "Cyrillic Supplement" ['\u0500', '\u052f']
    let Armenian = PredefinedSet.Create "Armenian" ['\u0530', '\u058f']
    let Hebrew = PredefinedSet.Create "Hebrew" ['\u0590', '\u05ff']
    let Arabic = PredefinedSet.Create "Arabic" ['\u0600', '\u06ff']
    let Syriac = PredefinedSet.Create "Syriac" ['\u0700', '\u074f']
    let ArabicSupplement = PredefinedSet.Create "Arabic Supplement" ['\u0750', '\u077f']
    let Thaana = PredefinedSet.Create "Thaana" ['\u0780', '\u07bf']
    let NKo = PredefinedSet.Create "NKo" ['\u07c0', '\u07ff']
    let Samaritan = PredefinedSet.Create "Samaritan" ['\u0800', '\u083f']
    let Devanagari = PredefinedSet.Create "Devanagari" ['\u0900', '\u097f']
    let Bengali = PredefinedSet.Create "Bengali" ['\u0980', '\u09ff']
    let Gurmukhi = PredefinedSet.Create "Gurmukhi" ['\u0a00', '\u0a7f']
    let Gujarati = PredefinedSet.Create "Gujarati" ['\u0a80', '\u0aff']
    let Oriya = PredefinedSet.Create "Oriya" ['\u0b00', '\u0b7f']
    let Tamil = PredefinedSet.Create "Tamil" ['\u0b80', '\u0bff']
    let Telugu = PredefinedSet.Create "Telugu" ['\u0c00', '\u0c7f']
    let Kannada = PredefinedSet.Create "Kannada" ['\u0c80', '\u0cff']
    let Malayalam = PredefinedSet.Create "Malayalam" ['\u0d00', '\u0d7f']
    let Sinhala = PredefinedSet.Create "Sinhala" ['\u0d80', '\u0dff']
    let Thai = PredefinedSet.Create "Thai" ['\u0e00', '\u0e7f']
    let Lao = PredefinedSet.Create "Lao" ['\u0e80', '\u0eff']
    let Tibetan = PredefinedSet.Create "Tibetan" ['\u0f00', '\u0fff']
    let Myanmar = PredefinedSet.Create "Myanmar" ['\u1000', '\u109f']
    let Georgian = PredefinedSet.Create "Georgian" ['\u10a0', '\u10ff']
    let HangulJamo = PredefinedSet.Create "Hangul Jamo" ['\u1100', '\u11ff']
    let Ethiopic = PredefinedSet.Create "Ethiopic" ['\u1200', '\u137f']
    let EthiopicSupplement = PredefinedSet.Create "Ethiopic Supplement" ['\u1380', '\u139f']
    let Cherokee = PredefinedSet.Create "Cherokee" ['\u13a0', '\u13ff']
    let UnifiedCanadianAboriginalSyllabics = PredefinedSet.Create "Unified Canadian Aboriginal Syllabics" ['\u1400', '\u167f']
    let Ogham = PredefinedSet.Create "Ogham" ['\u1680', '\u169f']
    let Runic = PredefinedSet.Create "Runic" ['\u16a0', '\u16ff']
    let Tagalog = PredefinedSet.Create "Tagalog" ['\u1700', '\u171f']
    let Hanunoo = PredefinedSet.Create "Hanunoo" ['\u1720', '\u173f']
    let Buhid = PredefinedSet.Create "Buhid" ['\u1740', '\u175f']
    let Tagbanwa = PredefinedSet.Create "Tagbanwa" ['\u1760', '\u177f']
    let Khmer = PredefinedSet.Create "Khmer" ['\u1780', '\u17ff']
    let Mongolian = PredefinedSet.Create "Mongolian" ['\u1800', '\u18af']
    let UnifiedCanadianAboriginalSyllabicsExtended = PredefinedSet.Create "Unified Canadian Aboriginal Syllabics Extended" ['\u18b0', '\u18ff']
    let Limbu = PredefinedSet.Create "Limbu" ['\u1900', '\u194f']
    let TaiLe = PredefinedSet.Create "Tai Le" ['\u1950', '\u197f']
    let NewTaiLue = PredefinedSet.Create "New Tai Lue" ['\u1980', '\u19df']
    let KhmerSymbols = PredefinedSet.Create "Khmer Symbols" ['\u19e0', '\u19ff']
    let Buginese = PredefinedSet.Create "Buginese" ['\u1a00', '\u1a1f']
    let TaiTham = PredefinedSet.Create "Tai Tham" ['\u1a20', '\u1aaf']
    let Balinese = PredefinedSet.Create "Balinese" ['\u1b00', '\u1b7f']
    let Sundanese = PredefinedSet.Create "Sundanese" ['\u1b80', '\u1bbf']
    let Lepcha = PredefinedSet.Create "Lepcha" ['\u1c00', '\u1c4f']
    let OlChiki = PredefinedSet.Create "Ol Chiki" ['\u1c50', '\u1c7f']
    let VedicExtensions = PredefinedSet.Create "Vedic Extensions" ['\u1cd0', '\u1cff']
    let PhoneticExtensions = PredefinedSet.Create "Phonetic Extensions" ['\u1d00', '\u1d7f']
    let PhoneticExtensionsSupplement = PredefinedSet.Create "Phonetic Extensions Supplement" ['\u1d80', '\u1dbf']
    let CombiningDiacriticalMarksSupplement = PredefinedSet.Create "Combining Diacritical Marks Supplement" ['\u1dc0', '\u1dff']
    let LatinExtendedAdditional = PredefinedSet.Create "Latin Extended Additional" ['\u1e00', '\u1eff']
    let GreekExtended = PredefinedSet.Create "Greek Extended" ['\u1f00', '\u1fff']
    let GeneralPunctuation = PredefinedSet.Create "General Punctuation" ['\u2000', '\u206f']
    let SuperscriptsAndSubscripts = PredefinedSet.Create "Superscripts and Subscripts" ['\u2070', '\u209f']
    let CurrencySymbols = PredefinedSet.Create "Currency Symbols" ['\u20a0', '\u20cf']
    let CombiningDiacriticalMarksForSymbols = PredefinedSet.Create "Combining Diacritical Marks for Symbols" ['\u20d0', '\u20ff']
    let LetterlikeSymbols = PredefinedSet.Create "Letterlike Symbols" ['\u2100', '\u214f']
    let NumberForms = PredefinedSet.Create "Number Forms" ['\u2150', '\u218f']
    let Arrows = PredefinedSet.Create "Arrows" ['\u2190', '\u21ff']
    let MathematicalOperators = PredefinedSet.Create "Mathematical Operators" ['\u2200', '\u22ff']
    let MiscellaneousTechnical = PredefinedSet.Create "Miscellaneous Technical" ['\u2300', '\u23ff']
    let ControlPictures = PredefinedSet.Create "Control Pictures" ['\u2400', '\u243f']
    let OpticalCharacterRecognition = PredefinedSet.Create "Optical Character Recognition" ['\u2440', '\u245f']
    let EnclosedAlphanumerics = PredefinedSet.Create "Enclosed Alphanumerics" ['\u2460', '\u24ff']
    let BoxDrawing = PredefinedSet.Create "Box Drawing" ['\u2500', '\u257f']
    let BlockElements = PredefinedSet.Create "Block Elements" ['\u2580', '\u259f']
    let GeometricShapes = PredefinedSet.Create "Geometric Shapes" ['\u25a0', '\u25ff']
    let MiscellaneousSymbols = PredefinedSet.Create "Miscellaneous Symbols" ['\u2600', '\u26ff']
    let Dingbats = PredefinedSet.Create "Dingbats" ['\u2700', '\u27bf']
    let MiscellaneousMathematicalSymbolsA = PredefinedSet.Create "Miscellaneous Mathematical Symbols-A" ['\u27c0', '\u27ef']
    let SupplementalArrowsA = PredefinedSet.Create "Supplemental Arrows-A" ['\u27f0', '\u27ff']
    let BraillePatterns = PredefinedSet.Create "Braille Patterns" ['\u2800', '\u28ff']
    let SupplementalArrowsB = PredefinedSet.Create "Supplemental Arrows-B" ['\u2900', '\u297f']
    let MiscellaneousMathematicalSymbolsB = PredefinedSet.Create "Miscellaneous Mathematical Symbols-B" ['\u2980', '\u29ff']
    let SupplementalMathematicalOperators = PredefinedSet.Create "Supplemental Mathematical Operators" ['\u2a00', '\u2aff']
    let MiscellaneousSymbolsAndArrows = PredefinedSet.Create "Miscellaneous Symbols and Arrows" ['\u2b00', '\u2bff']
    let Glagolitic = PredefinedSet.Create "Glagolitic" ['\u2c00', '\u2c5f']
    let LatinExtendedC = PredefinedSet.Create "Latin Extended-C" ['\u2c60', '\u2c7f']
    let Coptic = PredefinedSet.Create "Coptic" ['\u2c80', '\u2cff']
    let GeorgianSupplement = PredefinedSet.Create "Georgian Supplement" ['\u2d00', '\u2d2f']
    let Tifinagh = PredefinedSet.Create "Tifinagh" ['\u2d30', '\u2d7f']
    let EthiopicExtended = PredefinedSet.Create "Ethiopic Extended" ['\u2d80', '\u2ddf']
    let CyrillicExtendedA = PredefinedSet.Create "Cyrillic Extended-A" ['\u2de0', '\u2dff']
    let SupplementalPunctuation = PredefinedSet.Create "Supplemental Punctuation" ['\u2e00', '\u2e7f']
    let CJKRadicalsSupplement = PredefinedSet.Create "CJK Radicals Supplement" ['\u2e80', '\u2eff']
    let KangxiRadicals = PredefinedSet.Create "Kangxi Radicals" ['\u2f00', '\u2fdf']
    let IdeographicDescriptionCharacters = PredefinedSet.Create "Ideographic Description Characters" ['\u2ff0', '\u2fff']
    let CJKSymbolsAndPunctuation = PredefinedSet.Create "CJK Symbols and Punctuation" ['\u3000', '\u303f']
    let Hiragana = PredefinedSet.Create "Hiragana" ['\u3040', '\u309f']
    let Katakana = PredefinedSet.Create "Katakana" ['\u30a0', '\u30ff']
    let Bopomofo = PredefinedSet.Create "Bopomofo" ['\u3100', '\u312f']
    let HangulCompatibilityJamo = PredefinedSet.Create "Hangul Compatibility Jamo" ['\u3130', '\u318f']
    let Kanbun = PredefinedSet.Create "Kanbun" ['\u3190', '\u319f']
    let BopomofoExtended = PredefinedSet.Create "Bopomofo Extended" ['\u31a0', '\u31bf']
    let CJKStrokes = PredefinedSet.Create "CJK Strokes" ['\u31c0', '\u31ef']
    let KatakanaPhoneticExtensions = PredefinedSet.Create "Katakana Phonetic Extensions" ['\u31f0', '\u31ff']
    let EnclosedCJKLettersAndMonths = PredefinedSet.Create "Enclosed CJK Letters and Months" ['\u3200', '\u32ff']
    let CJKCompatibility = PredefinedSet.Create "CJK Compatibility" ['\u3300', '\u33ff']
    let CJKUnifiedIdeographsExtensionA = PredefinedSet.Create "CJK Unified Ideographs Extension A" ['\u3400', '\u4dbf']
    let YijingHexagramSymbols = PredefinedSet.Create "Yijing Hexagram Symbols" ['\u4dc0', '\u4dff']
    let CJKUnifiedIdeographs = PredefinedSet.Create "CJK Unified Ideographs" ['\u4e00', '\u9fff']
    let YiSyllables = PredefinedSet.Create "Yi Syllables" ['\ua000', '\ua48f']
    let YiRadicals = PredefinedSet.Create "Yi Radicals" ['\ua490', '\ua4cf']
    let Lisu = PredefinedSet.Create "Lisu" ['\ua4d0', '\ua4ff']
    let Vai = PredefinedSet.Create "Vai" ['\ua500', '\ua63f']
    let CyrillicExtendedB = PredefinedSet.Create "Cyrillic Extended-B" ['\ua640', '\ua69f']
    let Bamum = PredefinedSet.Create "Bamum" ['\ua6a0', '\ua6ff']
    let ModifierToneLetters = PredefinedSet.Create "Modifier Tone Letters" ['\ua700', '\ua71f']
    let LatinExtendedD = PredefinedSet.Create "Latin Extended-D" ['\ua720', '\ua7ff']
    let SylotiNagri = PredefinedSet.Create "Syloti Nagri" ['\ua800', '\ua82f']
    let CommonIndicNumberForms = PredefinedSet.Create "Common Indic Number Forms" ['\ua830', '\ua83f']
    let PhagsPa = PredefinedSet.Create "Phags-pa" ['\ua840', '\ua87f']
    let Saurashtra = PredefinedSet.Create "Saurashtra" ['\ua880', '\ua8df']
    let DevanagariExtended = PredefinedSet.Create "Devanagari Extended" ['\ua8e0', '\ua8ff']
    let KayahLi = PredefinedSet.Create "Kayah Li" ['\ua900', '\ua92f']
    let Rejang = PredefinedSet.Create "Rejang" ['\ua930', '\ua95f']
    let HangulJamoExtendedA = PredefinedSet.Create "Hangul Jamo Extended-A" ['\ua960', '\ua97f']
    let Javanese = PredefinedSet.Create "Javanese" ['\ua980', '\ua9df']
    let Cham = PredefinedSet.Create "Cham" ['\uaa00', '\uaa5f']
    let MyanmarExtendedA = PredefinedSet.Create "Myanmar Extended-A" ['\uaa60', '\uaa7f']
    let TaiViet = PredefinedSet.Create "Tai Viet" ['\uaa80', '\uaadf']
    let MeeteiMayek = PredefinedSet.Create "Meetei Mayek" ['\uabc0', '\uabff']
    let HangulSyllables = PredefinedSet.Create "Hangul Syllables" ['\uac00', '\ud7af']
    let HangulJamoExtendedB = PredefinedSet.Create "Hangul Jamo Extended-B" ['\ud7b0', '\ud7ff']
    let PrivateUseArea = PredefinedSet.Create "Private Use Area" ['\ue000', '\uf8ff']
    let CJKCompatibilityIdeographs = PredefinedSet.Create "CJK Compatibility Ideographs" ['\uf900', '\ufaff']
    let AlphabeticPresentationForms = PredefinedSet.Create "Alphabetic Presentation Forms" ['\ufb00', '\ufb4f']
    let ArabicPresentationFormsA = PredefinedSet.Create "Arabic Presentation Forms-A" ['\ufb50', '\ufdff']
    let VariationSelectors = PredefinedSet.Create "Variation Selectors" ['\ufe00', '\ufe0f']
    let VerticalForms = PredefinedSet.Create "Vertical Forms" ['\ufe10', '\ufe1f']
    let CombiningHalfMarks = PredefinedSet.Create "Combining Half Marks" ['\ufe20', '\ufe2f']
    let CJKCompatibilityForms = PredefinedSet.Create "CJK Compatibility Forms" ['\ufe30', '\ufe4f']
    let SmallFormVariants = PredefinedSet.Create "Small Form Variants" ['\ufe50', '\ufe6f']
    let ArabicPresentationFormsB = PredefinedSet.Create "Arabic Presentation Forms-B" ['\ufe70', '\ufeff']
    let HalfwidthAndFullwidthForms = PredefinedSet.Create "Halfwidth and Fullwidth Forms" ['\uff00', '\uffef']
    let ANSIMapped = PredefinedSet.Create "ANSI Mapped" [
        '\u0152', '\u0153'
        '\u0160', '\u0161'
        '\u0178', '\u0178'
        '\u017d', '\u017e'
        '\u0192', '\u0192'
        '\u02c6', '\u02c6'
        '\u02dc', '\u02dc'
        '\u2013', '\u2014'
        '\u2018', '\u201a'
        '\u201c', '\u201e'
        '\u2020', '\u2022'
        '\u2026', '\u2026'
        '\u2030', '\u2030'
        '\u2039', '\u203a'
        '\u20ac', '\u20ac'
        '\u2122', '\u2122'
    ]
    let ANSIPrintable = PredefinedSet.Create "ANSI Printable" [
        '\u0020', '\u007e'
        '\u00a0', '\u00ff'
    ]
    [<System.Obsolete("This character set is a relic from GOLD Parser, \
does not include characters outside the Basic Multillingual Plane, and might lead to performance problems. \
Instead, use Regex.allButChars (or NotOneOf) to more efficiently exlude certain characters.")>]
    let AllValid = PredefinedSet.Create "All Valid" [
        '\u0001', '\ud7ff'
        '\ue000', '\uffef'
    ]
    let AllPrintable = PredefinedSet.Create "All Printable" [
        '\u0020', '\u007f'
        '\u00a0', '\u200a'
        '\u2010', '\u2027'
        '\u202f', '\u205f'
        '\u2065', '\u2069'
        '\u2070', '\ud7ff'
        '\ue000', '\ufefe'
        '\uff00', '\uffef'
    ]
    let AllLetters = PredefinedSet.Create "All Letters" [
        '\u0041', '\u005a'
        '\u0061', '\u007a'
        '\u00aa', '\u00aa'
        '\u00b5', '\u00b5'
        '\u00ba', '\u00ba'
        '\u00c0', '\u00d6'
        '\u00d8', '\u00f6'
        '\u00f8', '\u02c1'
        '\u02c6', '\u02d1'
        '\u02e0', '\u02e4'
        '\u02ee', '\u02ee'
        '\u037a', '\u037d'
        '\u0386', '\u0386'
        '\u0388', '\u038a'
        '\u038c', '\u038c'
        '\u038e', '\u03a1'
        '\u03a3', '\u03ce'
        '\u03d0', '\u03f5'
        '\u03f7', '\u0481'
        '\u048a', '\u0513'
        '\u0531', '\u0556'
        '\u0559', '\u0559'
        '\u0561', '\u0587'
        '\u05d0', '\u05ea'
        '\u05f0', '\u05f2'
        '\u0621', '\u063a'
        '\u0640', '\u064a'
        '\u066e', '\u066f'
        '\u0671', '\u06d3'
        '\u06d5', '\u06d5'
        '\u06e5', '\u06e6'
        '\u06ee', '\u06ef'
        '\u06fa', '\u06fc'
        '\u06ff', '\u06ff'
        '\u0710', '\u0710'
        '\u0712', '\u072f'
        '\u074d', '\u076d'
        '\u0780', '\u07a5'
        '\u07b1', '\u07b1'
        '\u07ca', '\u07ea'
        '\u07f4', '\u07f5'
        '\u07fa', '\u07fa'
        '\u0904', '\u0939'
        '\u093d', '\u093d'
        '\u0950', '\u0950'
        '\u0958', '\u0961'
        '\u097b', '\u097f'
        '\u0985', '\u098c'
        '\u098f', '\u0990'
        '\u0993', '\u09a8'
        '\u09aa', '\u09b0'
        '\u09b2', '\u09b2'
        '\u09b6', '\u09b9'
        '\u09bd', '\u09bd'
        '\u09ce', '\u09ce'
        '\u09dc', '\u09dd'
        '\u09df', '\u09e1'
        '\u09f0', '\u09f1'
        '\u0a05', '\u0a0a'
        '\u0a0f', '\u0a10'
        '\u0a13', '\u0a28'
        '\u0a2a', '\u0a30'
        '\u0a32', '\u0a33'
        '\u0a35', '\u0a36'
        '\u0a38', '\u0a39'
        '\u0a59', '\u0a5c'
        '\u0a5e', '\u0a5e'
        '\u0a72', '\u0a74'
        '\u0a85', '\u0a8d'
        '\u0a8f', '\u0a91'
        '\u0a93', '\u0aa8'
        '\u0aaa', '\u0ab0'
        '\u0ab2', '\u0ab3'
        '\u0ab5', '\u0ab9'
        '\u0abd', '\u0abd'
        '\u0ad0', '\u0ad0'
        '\u0ae0', '\u0ae1'
        '\u0b05', '\u0b0c'
        '\u0b0f', '\u0b10'
        '\u0b13', '\u0b28'
        '\u0b2a', '\u0b30'
        '\u0b32', '\u0b33'
        '\u0b35', '\u0b39'
        '\u0b3d', '\u0b3d'
        '\u0b5c', '\u0b5d'
        '\u0b5f', '\u0b61'
        '\u0b71', '\u0b71'
        '\u0b83', '\u0b83'
        '\u0b85', '\u0b8a'
        '\u0b8e', '\u0b90'
        '\u0b92', '\u0b95'
        '\u0b99', '\u0b9a'
        '\u0b9c', '\u0b9c'
        '\u0b9e', '\u0b9f'
        '\u0ba3', '\u0ba4'
        '\u0ba8', '\u0baa'
        '\u0bae', '\u0bb9'
        '\u0c05', '\u0c0c'
        '\u0c0e', '\u0c10'
        '\u0c12', '\u0c28'
        '\u0c2a', '\u0c33'
        '\u0c35', '\u0c39'
        '\u0c60', '\u0c61'
        '\u0c85', '\u0c8c'
        '\u0c8e', '\u0c90'
        '\u0c92', '\u0ca8'
        '\u0caa', '\u0cb3'
        '\u0cb5', '\u0cb9'
        '\u0cbd', '\u0cbd'
        '\u0cde', '\u0cde'
        '\u0ce0', '\u0ce1'
        '\u0d05', '\u0d0c'
        '\u0d0e', '\u0d10'
        '\u0d12', '\u0d28'
        '\u0d2a', '\u0d39'
        '\u0d60', '\u0d61'
        '\u0d85', '\u0d96'
        '\u0d9a', '\u0db1'
        '\u0db3', '\u0dbb'
        '\u0dbd', '\u0dbd'
        '\u0dc0', '\u0dc6'
        '\u0e01', '\u0e30'
        '\u0e32', '\u0e33'
        '\u0e40', '\u0e46'
        '\u0e81', '\u0e82'
        '\u0e84', '\u0e84'
        '\u0e87', '\u0e88'
        '\u0e8a', '\u0e8a'
        '\u0e8d', '\u0e8d'
        '\u0e94', '\u0e97'
        '\u0e99', '\u0e9f'
        '\u0ea1', '\u0ea3'
        '\u0ea5', '\u0ea5'
        '\u0ea7', '\u0ea7'
        '\u0eaa', '\u0eab'
        '\u0ead', '\u0eb0'
        '\u0eb2', '\u0eb3'
        '\u0ebd', '\u0ebd'
        '\u0ec0', '\u0ec4'
        '\u0ec6', '\u0ec6'
        '\u0edc', '\u0edd'
        '\u0f00', '\u0f00'
        '\u0f40', '\u0f47'
        '\u0f49', '\u0f6a'
        '\u0f88', '\u0f8b'
        '\u1000', '\u1021'
        '\u1023', '\u1027'
        '\u1029', '\u102a'
        '\u1050', '\u1055'
        '\u10a0', '\u10c5'
        '\u10d0', '\u10fa'
        '\u10fc', '\u10fc'
        '\u1100', '\u1159'
        '\u115f', '\u11a2'
        '\u11a8', '\u11f9'
        '\u1200', '\u1248'
        '\u124a', '\u124d'
        '\u1250', '\u1256'
        '\u1258', '\u1258'
        '\u125a', '\u125d'
        '\u1260', '\u1288'
        '\u128a', '\u128d'
        '\u1290', '\u12b0'
        '\u12b2', '\u12b5'
        '\u12b8', '\u12be'
        '\u12c0', '\u12c0'
        '\u12c2', '\u12c5'
        '\u12c8', '\u12d6'
        '\u12d8', '\u1310'
        '\u1312', '\u1315'
        '\u1318', '\u135a'
        '\u1380', '\u138f'
        '\u13a0', '\u13f4'
        '\u1401', '\u166c'
        '\u166f', '\u1676'
        '\u1681', '\u169a'
        '\u16a0', '\u16ea'
        '\u1700', '\u170c'
        '\u170e', '\u1711'
        '\u1720', '\u1731'
        '\u1740', '\u1751'
        '\u1760', '\u176c'
        '\u176e', '\u1770'
        '\u1780', '\u17b3'
        '\u17d7', '\u17d7'
        '\u17dc', '\u17dc'
        '\u1820', '\u1877'
        '\u1880', '\u18a8'
        '\u1900', '\u191c'
        '\u1950', '\u196d'
        '\u1970', '\u1974'
        '\u1980', '\u19a9'
        '\u19c1', '\u19c7'
        '\u1a00', '\u1a16'
        '\u1b05', '\u1b33'
        '\u1b45', '\u1b4b'
        '\u1d00', '\u1dbf'
        '\u1e00', '\u1e9b'
        '\u1ea0', '\u1ef9'
        '\u1f00', '\u1f15'
        '\u1f18', '\u1f1d'
        '\u1f20', '\u1f45'
        '\u1f48', '\u1f4d'
        '\u1f50', '\u1f57'
        '\u1f59', '\u1f59'
        '\u1f5b', '\u1f5b'
        '\u1f5d', '\u1f5d'
        '\u1f5f', '\u1f7d'
        '\u1f80', '\u1fb4'
        '\u1fb6', '\u1fbc'
        '\u1fbe', '\u1fbe'
        '\u1fc2', '\u1fc4'
        '\u1fc6', '\u1fcc'
        '\u1fd0', '\u1fd3'
        '\u1fd6', '\u1fdb'
        '\u1fe0', '\u1fec'
        '\u1ff2', '\u1ff4'
        '\u1ff6', '\u1ffc'
        '\u2071', '\u2071'
        '\u207f', '\u207f'
        '\u2090', '\u2094'
        '\u2102', '\u2102'
        '\u2107', '\u2107'
        '\u210a', '\u2113'
        '\u2115', '\u2115'
        '\u2119', '\u211d'
        '\u2124', '\u2124'
        '\u2126', '\u2126'
        '\u2128', '\u2128'
        '\u212a', '\u212d'
        '\u212f', '\u2139'
        '\u213c', '\u213f'
        '\u2145', '\u2149'
        '\u214e', '\u214e'
        '\u2183', '\u2184'
        '\u2c00', '\u2c2e'
        '\u2c30', '\u2c5e'
        '\u2c60', '\u2c6c'
        '\u2c74', '\u2c77'
        '\u2c80', '\u2ce4'
        '\u2d00', '\u2d25'
        '\u2d30', '\u2d65'
        '\u2d6f', '\u2d6f'
        '\u2d80', '\u2d96'
        '\u2da0', '\u2da6'
        '\u2da8', '\u2dae'
        '\u2db0', '\u2db6'
        '\u2db8', '\u2dbe'
        '\u2dc0', '\u2dc6'
        '\u2dc8', '\u2dce'
        '\u2dd0', '\u2dd6'
        '\u2dd8', '\u2dde'
        '\u3005', '\u3006'
        '\u3031', '\u3035'
        '\u303b', '\u303c'
        '\u3041', '\u3096'
        '\u309d', '\u309f'
        '\u30a1', '\u30fa'
        '\u30fc', '\u30ff'
        '\u3105', '\u312c'
        '\u3131', '\u318e'
        '\u31a0', '\u31b7'
        '\u31f0', '\u31ff'
        '\u3400', '\u4db5'
        '\u4e00', '\u9fbb'
        '\ua000', '\ua48c'
        '\ua717', '\ua71a'
        '\ua800', '\ua801'
        '\ua803', '\ua805'
        '\ua807', '\ua80a'
        '\ua80c', '\ua822'
        '\ua840', '\ua873'
        '\uac00', '\ud7a3'
        '\uf900', '\ufa2d'
        '\ufa30', '\ufa6a'
        '\ufa70', '\ufad9'
        '\ufb00', '\ufb06'
        '\ufb13', '\ufb17'
        '\ufb1d', '\ufb1d'
        '\ufb1f', '\ufb28'
        '\ufb2a', '\ufb36'
        '\ufb38', '\ufb3c'
        '\ufb3e', '\ufb3e'
        '\ufb40', '\ufb41'
        '\ufb43', '\ufb44'
        '\ufb46', '\ufbb1'
        '\ufbd3', '\ufd3d'
        '\ufd50', '\ufd8f'
        '\ufd92', '\ufdc7'
        '\ufdf0', '\ufdfb'
        '\ufe70', '\ufe74'
        '\ufe76', '\ufefc'
        '\uff21', '\uff3a'
        '\uff41', '\uff5a'
        '\uff66', '\uffbe'
        '\uffc2', '\uffc7'
        '\uffca', '\uffcf'
        '\uffd2', '\uffd7'
        '\uffda', '\uffdc'
    ]
    /// Unicode Line Separator
    let LS = PredefinedSet.Create "LS" ['\u2028', '\u2028']
    /// Unicode Paragraph Separator
    let PS = PredefinedSet.Create "PS" ['\u2029', '\u2029']
    let AllSpace = PredefinedSet.Create "All Space" [
        '\u0020', '\u0020'
        '\u00a0', '\u00a0'
        '\u1680', '\u1680'
        '\u180e', '\u180e'
        '\u2000', '\u200a'
        '\u202f', '\u202f'
        '\u205f', '\u205f'
        '\u3000', '\u3000'
    ]
    let AllNewline = PredefinedSet.Create "All Newline" [
        '\u000a', '\u000a'
        '\u000d', '\u000d'
        '\u2028', '\u2029'
    ]
    let AllWhitespace = PredefinedSet.Create "All Whitespace" [
        '\u0009', '\u000d'
        '\u0020', '\u0020'
        '\u0085', '\u0085'
        '\u00a0', '\u00a0'
        '\u1680', '\u1680'
        '\u180e', '\u180e'
        '\u2000', '\u200a'
        '\u2028', '\u2029'
        '\u202f', '\u202f'
        '\u205f', '\u205f'
        '\u3000', '\u3000'
    ]
    let ControlCodes = PredefinedSet.Create "Control Codes" [
        '\u0000', '\u001f'
        '\u007f', '\u009f'
    ]
    let Formatting = PredefinedSet.Create "Formatting" [
        '\u200b', '\u200f'
        '\u202a', '\u202e'
        '\u2060', '\u2064'
        '\u206a', '\u206f'
        '\ufeff', '\ufeff'
        '\ufff9', '\ufffb'
    ]
