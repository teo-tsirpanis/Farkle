// Copyright (c) 2018 Theodore Tsirpanis
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

namespace Farkle

open Farkle.Grammar
open FSharpx.Collections

/// A grammar, as needed by the parser.
/// This type is different from `Farkle.Grammar.GOLDGrammar`, because this describes a full grammar as generated by GOLD Parser.
/// A runtime grammar however can be created from anywhere.
type RuntimeGrammar = {
    /// The grammar's DFA states.
    DFAStates: DFA
    /// The grammar's LALR states.
    // I was going to make a separate type for this and the DFA, based on functions.
    // This would support auto-generated chained ifs, but I changed my mind after reading this:
    // https://softwareengineering.stackexchange.com/questions/193786/
    LALRStates: LALR
    /// The grammar's lexical groups.
    Groups: RandomAccessList<Group>
}

/// Functions to work with `RuntimeGrammar`s.
module RuntimeGrammar =

    /// Convert a `GOLDGrammar` to a `RuntimeGrammar`.
    let ofGOLDGrammar (grammar: GOLDGrammar) =
        {
            DFAStates = grammar.DFA
            LALRStates = grammar.LALR
            Groups = grammar.Groups
        }