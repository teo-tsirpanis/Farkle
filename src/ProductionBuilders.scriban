{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ ap = "\'" ~}}
// <auto-generated/>
// This file was automatically generated by Farkle{{ ap }}s build system from a Scriban template.
// It should not be manually edited; to regenerate it run {{ ap }}build.ps1 target GenerateCode{{ ap }}.
{{~ # This function is for use by compiled F# code and should not be used directly ~}}
#nowarn "1204"
{{~ func gen_type_params_impl
        x = ""
        for i in 1..$0
            x = x + $1 + i
            if !for.last
                x = x + $2
            end
        end
        ret x
    end
    func type_params
        ret gen_type_params_impl $0 "'T" ", "
    end
    func type_indices
        ret gen_type_params_impl $0 "idx" ", "
    end
    func func_signature
        ret (gen_type_params_impl $0 "'T" " -> ") + "-> 'TOutput"
    end
    func delegate_signature
        ret "Func<" + (type_params $0) + ", 'TOutput>"
    end ~}}
{{~ func gen_builder

        n = $0 ~}}
/// <summary>A production builder with {{ n }} significant member{{ if n != 1; "s"; end;}}.</summary>
/// <seealso cref="T:Farkle.Builder.ProductionBuilder"/>
[<Sealed; NullableContext(2uy)>]
type ProductionBuilder<{{ type_params n }}> internal(members, {{ type_indices n }}, cpToken) =
    /// Creates a production builder from this one with the given untyped
    /// designtime Farkle added to the end as a not significant member.
    [<NullableContext(2uy)>]
    member _.Append([<Nullable(1uy)>] df: DesigntimeFarkle) : [<Nullable(1uy)>] _ =
        nullCheck (nameof df) df
        ProductionBuilder<{{ type_params n }}>(listAdd members df, {{type_indices n }}, cpToken)
    /// <summary>The <c>Append(DesigntimeFarkle)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<{{ type_params n }}>, df: DesigntimeFarkle) =
        x.Append(df)
    /// Creates a production builder from this one with
    /// the given string added to the end as a literal.
    [<NullableContext(2uy)>]
    member x.Append([<Nullable(1uy)>] literal) : [<Nullable(1uy)>] _ = x.Append(Literal literal)
    /// <summary>The <c>Append(string)</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>) (x: ProductionBuilder<{{ type_params n }}>, literal: string) =
        x.Append(literal)
    {{~ if n != capacity ~}}
    /// Creates a production builder from this one with the given typed
    /// designtime Farkle added to the end as a significant member.
    /// Up to sixteen significant members can be added to a production builder.
    [<NullableContext(1uy)>]
    member _.Extend<[<Nullable(2uy)>] {{ ap }}T{{ n + 1 }}>(df: DesigntimeFarkle<{{ ap }}T{{ n + 1 }}>) =
        nullCheck (nameof df) df
        ProductionBuilder<{{ type_params n + 1 }}>(listAdd members df, {{type_indices n }}, members.Count, cpToken)
    /// <summary>The <c>Extend</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (.>>.) (x: ProductionBuilder<{{ type_params n }}>, df) =
        x.Extend(df)
    {{~ end ~}}
    /// Finishes the production{{ ap }}s construction and returns it.
    /// This method accepts a delegate that accepts the production{{ ap }}s
    /// significant members and returns the production{{ ap }}s output.
    [<NullableContext(1uy)>]
    member _.Finish<[<Nullable(0uy)>] {{ap}}TOutput>([<Nullable(1uy)>] f: {{delegate_signature n}}) : [<Nullable(1uy)>] _ =
        nullCheck (nameof f) f
        {{~ # By explicitly declaring the variables the closure will not capture `members`.
        for i in 1..n ~}}
        let idx{{ i }} = idx{{ i }}
        {{~ end ~}}
        let fBoxed =
            F(fun arr ->
                f.Invoke(
                    {{~ for i in 1..n
                    # Lol, even an unbox in F# generic typess is expensive.
                    # They want to make sure that unboxing an F# non-nullable type
                    # is never unboxed from null. But that would pose problems for those
                    # that might use Unchecked.defaultof, and an exception will already be thrown.~}}
                    (UnboxFast arr[idx{{ i }}]){{ if !for.last }},{{ end }}
                    {{~ end ~}}
                )
            )
        let fuserData = FuserData.Create(fBoxed)
        ProductionConcrete<{{ ap }}TOutput>(members, fuserData, cpToken) :> Production<_>
    /// <summary>Returns a production builder with the given contextual precedence token.</summary>
    /// <param name="cpToken">An object that identifies the production
    /// when defining operator precedence and associativity.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="cpToken"/>
    /// is <see langword="null"/>.</exception>
    member _.WithPrecedence([<Nullable(1uy)>] cpToken) : [<Nullable(1uy)>] _ =
        nullCheck (nameof cpToken) cpToken
        ProductionBuilder<{{ type_params n }}>(members, {{ type_indices n }}, cpToken)
    /// <summary>Returns a production builder with a unique contextual precedence
    /// token assigned to it, which is also returned by reference.</summary>
    /// <param name="cpToken">The reference that will be assigned a newly created object
    /// which will serve as the production{{ ap }}s contextual precedence token.</param>
    /// <remarks>This method allows a simpler experience for C# users.</remarks>
    [<NullableContext(1uy)>]
    member x.WithPrecedence([<Nullable(1uy)>] cpTokenRef: outref<_>) : [<Nullable(1uy)>] _ =
        let tok = obj()
        cpTokenRef <- tok
        x.WithPrecedence(tok)
    {{~ if n == 1 }}
    /// Returns a production that returns its significant member without changing it.
    member _.AsIs() : [<Nullable(1uy)>] _ =
        ProductionConcrete<{{ ap }}T1>(members, FuserData.CreateAsIs idx1, cpToken) :> Production<_>
    {{~ end ~}}
    /// Finishes the production{{ ap }}s construction and returns it.
    /// This method accepts an F# function that accepts the production{{ ap }}s
    /// significant members and returns the production{{ ap }}s output.
    member x.FinishFSharp([<Nullable(1uy)>] f: {{ func_signature n }}): [<Nullable(1uy)>] Production<{{ ap }}TOutput> =
        {{~ if n == 1 ~}}
        x.Finish(Delegate.ofInvokeMethod f)
        {{~ else if n <= 5 ~}}
        let fOptimized =
            OptimizedClosures.FSharpFunc<{{ type_params n }}, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
        {{~ else
        func_call_arguments = gen_type_params_impl n "x" " " ~}}
        x.Finish(fun {{ func_call_arguments }} ->
            f {{ func_call_arguments}})
        {{~ end ~}}
    /// <summary>The <c>FinishFSharp</c> method as an F# operator.</summary>
    [<EditorBrowsable(EditorBrowsableState.Never)>]
    static member inline (=>) (x: ProductionBuilder<{{ type_params n }}>, f) =
        x.FinishFSharp(f)

{{~ end ~}}

namespace Farkle.Builder.ProductionBuilders

open Farkle.Builder
open Farkle.Common
open LanguagePrimitives.IntrinsicFunctions
open System
open System.ComponentModel
open System.Collections.Immutable
open System.Runtime.CompilerServices

[<AutoOpen>]
module private ProductionBuilderHelpers =
    let inline listAdd (list: ImmutableList<_>) (df: DesigntimeFarkle) = list.Add df

{{~ capacity = 16;
    for i in (1..capacity) reversed
        gen_builder i
    end ~}}
