{{~ ## Copyright Â© Theodore Tsirpanis and Contributors.
SPDX-License-Identifier: MIT ~}}
{{~ ap = "\'" ~}}
// <auto-generated/>
// This file was automatically generated by Farkle{{ ap }}s build system from a Scriban template.
// It should not be manually edited; to regenerate it run {{ ap }}build.ps1 target GenerateCode{{ ap }}.
{{~ func gen_type_params_impl
        x = ""
        for i in 1..$0
            x = x + $1 + i
            if !for.last
                x = x + $2
            end
        end
        ret x
    end
    func type_params
        ret gen_type_params_impl $0 "T" ", "
    end
    func type_indices
        ret gen_type_params_impl $0 "_idx" ", "
    end
    func type_indices_params
        ret gen_type_params_impl $0 "int idx" ", "
    end ~}}
{{~ func gen_builder

        n = $0 ~}}
/// <summary>A production builder with {{ n }} significant {{ n | string.pluralize "member" "members" }}.</summary>
/// <seealso cref="ProductionBuilder"/>
public sealed class ProductionBuilder<{{ type_params n}}> : IProductionBuilder<ProductionBuilder<{{ type_params n}}>>
{
    private readonly ImmutableList<IGrammarSymbol> _members;
    private readonly object? _precedenceToken;
    private readonly int {{ type_indices n }};

    internal ProductionBuilder(ImmutableList<IGrammarSymbol> members, {{ type_indices_params n }}, object? precedenceToken)
    {
        _members = members;
        {{ for i in 1..n; $"_idx{i} = idx{i};"; if !for.last; " "; end; end }}
        _precedenceToken = precedenceToken;
    }

    void IProductionBuilder<ProductionBuilder<{{ type_params n}}>>.MustNotImplement() { }

    /// <inheritdoc/>
    public ProductionBuilder<{{ type_params n}}> Append(IGrammarSymbol symbol)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(symbol);
        return new(_members.Add(symbol), {{ type_indices n }}, _precedenceToken);
    }

    {{~ if n != capacity ~}}
    /// <summary>
    /// Extends the production with a new significant member.
    /// </summary>
    /// <typeparam name="T{{ n + 1 }}">The type of the new significant member.</typeparam>
    /// <param name="symbol">The new significant member.</param>
    /// <returns>A production builder with <paramref name="symbol"/> added to its end as a significant member.</returns>
    public ProductionBuilder<{{ type_params n + 1}}> Extend<T{{ n + 1 }}>(IGrammarSymbol<T{{ n + 1 }}> symbol)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(symbol);
        return new(_members.Add(symbol), {{ type_indices n }}, _members.Count, _precedenceToken);
    }

    {{~ end ~}}
    /// <summary>
    /// Finishes building the production, making it return the result of applying
    /// the given function to the significant members.
    /// </summary>
    /// <param name="fuser">The function to apply to the significant members.</param>
    public IProduction<T> Finish<T>(Func<{{ type_params n }}, T> fuser)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(fuser);
        {{~ # By explicitly declaring the variables the closure will not capture `_members`. ~}}
        {{ for i in 1..n; $"int idx{i} = _idx{i};"; if !for.last; " "; end; end }}
        object? fBoxed(ref ParserState state, Span<object?> args) =>
            fuser({{ for i in 1..n; $"(T{i})args[idx{i}]!"; if !for.last; ", "; end; end }});
        // We don{{ ap }}t use [.. _members] because it generates more IL.
        return new Production<T>(_members.ToImmutableArray(), fBoxed, _precedenceToken);
    }

    {{~ if n == 1 ~}}
    /// <summary>
    /// Finishes building the production, making it return its single significant member unchanged.
    /// </summary>
    public IProduction<T1> AsProduction() => Finish(x => x);

    /// <summary>
    /// Obsolete, use <see cref="AsProduction"/> instead.
    /// </summary>
    [Obsolete(Obsoletions.AsIsApiMessage
#if NET5_0_OR_GREATER
        , DiagnosticId = Obsoletions.AsIsApiCode, UrlFormat = Obsoletions.SharedUrlFormat
#endif
    ), EditorBrowsable(EditorBrowsableState.Never)]
    public IProduction<T1> AsIs() => AsProduction();

    {{~ end ~}}
    /// <inheritdoc/>
    public ProductionBuilder<{{ type_params n}}> WithPrecedence(object precedenceToken)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(precedenceToken);
        return new(_members, {{ type_indices n }}, precedenceToken);
    }
}

{{~ end ~}}

#nullable enable

namespace Farkle.Builder.ProductionBuilders;

using Farkle.Builder;
using Farkle.Parser;
using System;
using System.Collections.Immutable;
using System.ComponentModel;

{{~ capacity = 16;
    for i in (1..capacity) reversed
        gen_builder i
    end ~}}
