{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ ap = "\'" ~}}
// This file was generated by Farkle{{ ap }}s build system, from a Scriban template.
// It should not be kept in source control.
{{~ func gen_type_params_impl
        x = ""
        for i in 1..$0
            x = x + $1 + i
            if !for.last
                x = x + $2
            end
        end
        ret x
    end
    func type_params
        ret gen_type_params_impl $0 "'T" ", "
    end
    func type_indices
        ret gen_type_params_impl $0 "idx" ", "
    end
    func finish_signature
        ret (gen_type_params_impl $0 "'T" " -> ") + "-> 'TOutput"
    end ~}}
{{~ func gen_builder
        n = $0 ~}}
[<Sealed>]
/// [omit]
type ProductionBuilder<{{ type_params n }}>(members, {{ type_indices n }}) =
    member __.Append(sym) = ProductionBuilder<{{ type_params n }}>(Symbol.append members sym, {{type_indices n }})
    member x.Append(lit) = x.Append(Literal lit)
    {{~ if n != capacity ~}}
    member __.Extend(df: DesigntimeFarkle<{{ ap }}T{{ n + 1 }}>) = ProductionBuilder<{{ type_params n + 1 }}>(Symbol.append members df, {{type_indices n }}, members.Count)
    {{~ end ~}}
    member __.FinishFSharp(f: {{ finish_signature n }}) : Production<{{ ap }}TOutput> =
        {{~ # https://github.com/dotnet/fsharp/issues/8034
        for i in 1..n ~}}
        let idx{{ i }} = idx{{ i }}
        {{~ end ~}}
        {
            Members = members.ToImmutableArray()
            Fuse =
                fun arr ->
                    f
                        {{~ for i in 1..n ~}}
                        (arr.[idx{{ i }}] :?> _)
                        {{~ end ~}}
                    |> box
        }
    {{~ if n == 1 }}
    /// Returns a production that returns the significant member as is.
    member x.AsIs() = x.FinishFSharp(id)
    {{~ end ~}}
    member x.Finish(f: Func<{{ type_params n }}, {{ ap }}TOutput>) =
        (fun {{ gen_type_params_impl n "x" " " }} ->
            f.Invoke({{ gen_type_params_impl n "x" ", " }}))
        |> x.FinishFSharp

{{~ end ~}}

namespace Farkle.Builder

open System
open System.Collections.Immutable

{{~ capacity = 16;
    for i in 1..capacity reversed
        gen_builder i
    end ~}}
