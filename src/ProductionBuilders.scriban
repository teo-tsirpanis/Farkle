{{~ ## Copyright (c) 2019 Theodore Tsirpanis

This software is released under the MIT License.
https://opensource.org/licenses/MIT ~}}
{{~ ap = "\'" ~}}
// This file was generated by Farkle{{ ap }}s build system from a Scriban template.
// It should not be kept in source control.
{{~ # This function is for use by compiled F# code and should not be used directly ~}}
#nowarn "1204"
{{~ func gen_type_params_impl
        x = ""
        for i in 1..$0
            x = x + $1 + i
            if !for.last
                x = x + $2
            end
        end
        ret x
    end
    func type_params
        ret gen_type_params_impl $0 "'T" ", "
    end
    func type_indices
        ret gen_type_params_impl $0 "idx" ", "
    end
    func func_signature
        ret (gen_type_params_impl $0 "'T" " -> ") + "-> 'TOutput"
    end
    func delegate_signature
        ret "Func<" + (type_params $0) + ", 'TOutput>"
    end ~}}
{{~ func gen_builder
        n = $0
        fast = n > 1 && n <= 5 ~}}
[<Sealed>]
/// [omit]
type ProductionBuilder<{{ type_params n }}> internal(members, {{ type_indices n }}) =
    member _.Append(df) = ProductionBuilder<{{ type_params n }}>(listAdd members df, {{type_indices n }})
    member x.Append(literal) = x.Append(Literal literal)
    {{~ if n != capacity ~}}
    member _.Extend(df: DesigntimeFarkle<{{ ap }}T{{ n + 1 }}>) = ProductionBuilder<{{ type_params n + 1 }}>(listAdd members df, {{type_indices n }}, members.Count)
    {{~ end ~}}
    member _.Finish(f: {{delegate_signature n}}) =
        {{~ # By explicitly declaring the variables the closure will not capture `members`.
        for i in 1..n ~}}
        let idx{{ i }} = idx{{ i }}
        {{~ end ~}}
        let fuser =
            F(fun arr ->
                f.Invoke(
                    {{~ for i in 1..n
                    # Lol, even an unbox in F# generic typess is expensive.
                    # They want to make sure that unboxing an F# non-nullable type
                    # is never unboxed from null. But that would pose problems for those
                    # that might use Unchecked.defaultof, and an exception will already be thrown.~}}
                    (UnboxFast arr.[idx{{ i }}]){{ if !for.last }},{{ end }}
                    {{~ end ~}}
                )
            )
        Production(members, fuser)
    {{~ if n == 1 }}
    /// Returns a production that returns the significant member as is.
    member x.AsIs() = x.Finish(fun x -> x)
    {{~ end ~}}
    member x.FinishFSharp(f: {{ func_signature n }}): Production<{{ ap }}TOutput> =
        {{~ if fast ~}}
        let fOptimized =
            OptimizedClosures.FSharpFunc<{{ type_params n }}, _>.Adapt(f)
            |> Delegate.ofInvokeMethod
        x.Finish(fOptimized)
        {{~ else if n == 1 ~}}
        x.Finish(Delegate.ofInvokeMethod f)
        {{~ else
        func_call_arguments = gen_type_params_impl n "x" " " ~}}
        x.Finish(fun {{ func_call_arguments }} ->
            f {{ func_call_arguments}})
        {{~ end ~}}

{{~ end ~}}

namespace Farkle.Builder

open Farkle.Collections
open Farkle.Common
open LanguagePrimitives.IntrinsicFunctions
open System

[<AutoOpen>]
module private ProductionBuilderHelpers =
    let inline listAdd list (df: DesigntimeFarkle) = ImmutableList.add list df

{{~ capacity = 16;
    for i in 1..capacity reversed
        gen_builder i
    end ~}}
